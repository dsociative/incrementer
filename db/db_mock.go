// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dsociative/incrementer/db (interfaces: DB)

// Package db is a generated GoMock package.
package db

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Incr mocks base method
func (m *MockDB) Incr() (int, error) {
	ret := m.ctrl.Call(m, "Incr")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incr indicates an expected call of Incr
func (mr *MockDBMockRecorder) Incr() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockDB)(nil).Incr))
}

// Number mocks base method
func (m *MockDB) Number() (int, error) {
	ret := m.ctrl.Call(m, "Number")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Number indicates an expected call of Number
func (mr *MockDBMockRecorder) Number() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Number", reflect.TypeOf((*MockDB)(nil).Number))
}

// SetSettings mocks base method
func (m *MockDB) SetSettings(arg0, arg1 int) error {
	ret := m.ctrl.Call(m, "SetSettings", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSettings indicates an expected call of SetSettings
func (mr *MockDBMockRecorder) SetSettings(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSettings", reflect.TypeOf((*MockDB)(nil).SetSettings), arg0, arg1)
}
